# Python Smart Meter Monitoring Daemon (pymeter)

# Configuration for logging
logging:
{
    # Set the loglevel
    loglevel = 3;     	# 0 = no logging, 1 = error, 
            		# 2 = warning, 3 = info, 4 = debug

    # Optionally, log to a file
    filelog = "/var/log/meterd.log";
};

# Smart meter configuration
meter:
{
    # Specify the serial port to which the smart meter is connected;
    # this is typically a USB to serial device:
    port = "/dev/ttyUSB0";

    # Specify the baud rate at which the meter outputs data
    speed = 115200;

    # Specify the number of data bits in the serial transmission;
    # valid values are 7 or 8
    bits = 8;

    # Specify the parity; valid values are "none", "odd" and "even"
    parity = "none";

    # Specify whether or not to use hardware flow control on the
    # serial line
    rts_cts = false;

    # Specify whether or not to use software flow control on the
    # serial line
    xon_xoff = false;

    # Specify the interval (in seconds) at which the smart meter outputs 
        # fresh readings; if the meter meets the DSMR criteria this is usually
    # 10 seconds.
    meter_interval = 1;
};

# InfluxDB configuration
influx:
{
    # Specify the InfluxDB access token that allows writing to the bucket
    # that will store the smart meter data
    token = "Insert your InfluxDB token here!";

    # Specify the InfluxDB organisation
    org = "ACME";

    # Specify the InfluxDB URL
    url = "http://influxdb.example.com:8086";

    # Specify the InfluxDB bucket to use
    bucket = "home";
};


# Database configuration
legacy_database:
{
    # Specify the database file in which the raw measurements of actual
    # consumption are stored. If you do not specify a file, storage of
    # this data will be disabled.
    raw_db = "/var/meterd/raw.db";

    # Specify the database in which 5 minute average values of the
    # measured actual consumption is stored. If no file is specified
    # this data will be discarded.
    fivemin_avg = "/var/meterd/5min.db";

    # Specify the database in which hourly average values of the
    # measured actual consumption is stored. If no file is specified
    # this data will be discarded.
    hourly_avg = "/var/meterd/hourly.db";

    # Specify the identifier for current consumption (the value below
    # is the default value specified in the DSMR specification)
    current_consumption_id = "1.7.0";

    # Specify the identifier for current production (the value below
    # is the default value specified in the DSMR specification)
    current_production_id = "2.7.0";

    # Optional; specify other raw identifiers to record, see the DSMR
    # specification for a full list of identifiers. Examples include
    # the counters for voltage per phase, etc.
    other_raw_counters = [ "32.7.0", "52.7.0", "72.7.0", "31.7.0", "51.7.0", "71.7.0", "21.7.0", "41.7.0", "61.7.0" ];

    # Specify the database in which total consumption data will
    # be stored. If no file is specified this data will be discarded.
    total_consumed = "/var/meterd/consumed.db";

    # Specify the interval with which to log total consumption;
    # five minutes (example below) is a sensible interval that will
    # not generate huge amounts of data that will make disk space
    # run out quickly.
    total_interval = 300;

    # Specify which consumption counters to record; the example below
    # is for a meter that measures 2 tariffs (high/low). As the example
    # shows, you can specify more than one counter.
    consumption:
    {
        lowtariff:
        {
            # A short string to describe the counter; this 
            # information is used by the output and plotting
            # tools included in the distribution
            description = "Low In";

            # The identifier of the counter; consumption counters
            # are normally identified as 1.8.x (where x = [1..8])
            # according to the DSMR specification.
            id = "1.8.1";
        };

        hightariff:
        {
            description = "High In";

            id = "1.8.2";
        };

        gas:
        {
            description = "Gas";

            id = "24.2.1";
        };
    };

    # Specify which production counters to record; the example below
    # is for a meter that measures 2 tariffs (high/low). As the example
    # shows, you can specify more than one counter.
    production:
    {
        lowtariff:
        {
            # A short string to describe the counter; this 
            # information is used by the output and plotting
            # tools included in the distribution
            description = "Low Out";

            # The identifier of the counter; production counters
            # are normally identified as 2.8.x (where x = [1..8])
            # according to the DSMR specification.
            id = "2.8.1";
        };

        hightariff:
        {
            description = "High Out";

            id = "2.8.2";
        };
    };
};
